// <auto-generated />
using System;
using ContactService.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ContactService.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250423153217_initDb")]
    partial class initDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ContactService.Domain.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("company");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.HasKey("Id");

                    b.ToTable("contacts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0e17976-0ee7-4662-8f75-9fb6ebd08a81"),
                            Company = "Poseidon BT",
                            CreatedAt = new DateTime(2025, 4, 23, 15, 32, 17, 90, DateTimeKind.Utc).AddTicks(8559),
                            Firstname = "Melih Ömer",
                            IsDeleted = false,
                            Lastname = "KAMAR"
                        },
                        new
                        {
                            Id = new Guid("ed584624-1260-493e-a206-3bb8b28f82a6"),
                            Company = "Company X",
                            CreatedAt = new DateTime(2025, 4, 23, 15, 32, 17, 90, DateTimeKind.Utc).AddTicks(8563),
                            Firstname = "Ali",
                            IsDeleted = false,
                            Lastname = "Veli"
                        },
                        new
                        {
                            Id = new Guid("321e8895-58c2-43ba-970b-0328d7177133"),
                            Company = "Company deleted",
                            CreatedAt = new DateTime(2025, 4, 23, 15, 32, 17, 90, DateTimeKind.Utc).AddTicks(8566),
                            Firstname = "Deleted",
                            IsDeleted = true,
                            Lastname = "Contact"
                        });
                });

            modelBuilder.Entity("ContactService.Domain.Entities.ContactInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid")
                        .HasColumnName("contact_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InfoContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("contact_informations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2102795b-41dd-4d70-bb91-a321dac58656"),
                            ContactId = new Guid("b0e17976-0ee7-4662-8f75-9fb6ebd08a81"),
                            CreatedAt = new DateTime(2025, 4, 23, 15, 32, 17, 91, DateTimeKind.Utc).AddTicks(8294),
                            InfoContent = "0505 090 07 04",
                            IsDeleted = false,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("46e06077-cd79-43f1-946b-9970b0e04557"),
                            ContactId = new Guid("b0e17976-0ee7-4662-8f75-9fb6ebd08a81"),
                            CreatedAt = new DateTime(2025, 4, 23, 15, 32, 17, 91, DateTimeKind.Utc).AddTicks(8297),
                            InfoContent = "İstanbul",
                            IsDeleted = false,
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("1ae461cd-0c34-4999-aa6d-5d8a8553454e"),
                            ContactId = new Guid("b0e17976-0ee7-4662-8f75-9fb6ebd08a81"),
                            CreatedAt = new DateTime(2025, 4, 23, 15, 32, 17, 91, DateTimeKind.Utc).AddTicks(8300),
                            InfoContent = "Mersin",
                            IsDeleted = false,
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("efaba73d-fb91-4120-9863-dc693b1e61d1"),
                            ContactId = new Guid("ed584624-1260-493e-a206-3bb8b28f82a6"),
                            CreatedAt = new DateTime(2025, 4, 23, 15, 32, 17, 91, DateTimeKind.Utc).AddTicks(8303),
                            InfoContent = "0505 505 05 05",
                            IsDeleted = false,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("2b97ff98-39c3-4cc3-a2ee-8fc5a596b818"),
                            ContactId = new Guid("ed584624-1260-493e-a206-3bb8b28f82a6"),
                            CreatedAt = new DateTime(2025, 4, 23, 15, 32, 17, 91, DateTimeKind.Utc).AddTicks(8306),
                            InfoContent = "İstanbul",
                            IsDeleted = false,
                            Type = 3
                        });
                });

            modelBuilder.Entity("ContactService.Domain.Entities.ContactInformation", b =>
                {
                    b.HasOne("ContactService.Domain.Entities.Contact", "Contact")
                        .WithMany("ContactInformations")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("ContactService.Domain.Entities.Contact", b =>
                {
                    b.Navigation("ContactInformations");
                });
#pragma warning restore 612, 618
        }
    }
}
